"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[934],{38079:e=>{e.exports=JSON.parse('{"functions":[{"name":"evaluate_noresult","desc":"Similar to `WebView:evaluate(...)`, but does not yield and does not return any result\\n\\n### Bug(s)\\n* Will not work if you run it before calling wry.run()","params":[{"name":"script","desc":"","lua_type":"string"}],"returns":[],"function_type":"method","source":{"line":35,"path":"lib/webview.luau"}},{"name":"evaluate_callback","desc":"Similar to `WebView:evaluate(...)`, but instead of yielding to return result, it passes the result to the callback function\\n\\n### Bug(s)\\n* Will not work if you run it before calling wry.run()","params":[{"name":"script","desc":"","lua_type":"string"},{"name":"callback","desc":"","lua_type":"(result: unknown) -> ()"}],"returns":[],"function_type":"method","source":{"line":48,"path":"lib/webview.luau"}},{"name":"evaluate","desc":"Runs the provided javascript code through the webview and returns the last statement as a lua value\\n\\n### Bug(s)\\n* Will yield forever if you run it before calling wry.run()\\n* Will yield forever if you run it while custom protocol is sending response to webview for **loading a page**\\n\\n### Example\\n\\n```lua\\nlocal result = webview:evaluate([[\\n\\tlet value = { a: 5000 };\\n\\tvalue.a += 1000;\\n\\n\\tvalue\\n]])\\n\\nprint(result.a) -- 6000\\n```","params":[{"name":"script","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"unknown"}],"function_type":"method","yields":true,"source":{"line":76,"path":"lib/webview.luau"}},{"name":"ipc_handler","desc":"Receive messages from javascript\\n\\n* Messages will automatically be converted into luau values\\n\\n### Example\\n\\n```lua\\n-- luau\\nwebview:ipc_handler(function(message)\\n\\tprint(message.print_this) -- \\"Hello, World!\\"\\nend)\\n```\\n\\n```js\\n// javascript\\nwindow.luneweb.postMessage({ print_this: \'Hello, World!\' })\\n```","params":[{"name":"callback","desc":"","lua_type":"( message: unknown ) -> void"}],"returns":[{"desc":"","lua_type":"Connection"}],"function_type":"method","source":{"line":102,"path":"lib/webview.luau"}},{"name":"load_url","desc":"Navigate to the specified url","params":[{"name":"url","desc":"","lua_type":"string"}],"returns":[],"function_type":"method","source":{"line":111,"path":"lib/webview.luau"}},{"name":"load_url_with_headers","desc":"Navigate to the specified url using the specified headers","params":[{"name":"url","desc":"","lua_type":"string"},{"name":"headers","desc":"","lua_type":"WebViewHeaders"}],"returns":[],"function_type":"method","errors":[{"lua_type":"\\"<parsed-header> has invalid header value.\\"","desc":"Occurs when headers contains more than 1 header value"}],"source":{"line":122,"path":"lib/webview.luau"}}],"properties":[],"types":[],"name":"WebView","desc":"### Example\\n\\n```lua\\nlocal webview = Wry.create_webview(window, {\\n\\tcustom_protocols = {\\n\\t\\tlune = function(request)\\n\\t\\t\\tif request.path == \\"/print\\" then\\n\\t\\t\\t\\tprint(\\"Hello, Lune!\\")\\n\\t\\t\\tend\\n\\n\\t\\t\\treturn \\"Hello, Lune!\\"\\n\\t\\tend,\\n\\t},\\n\\turl = \\"http://lune.app/\\"\\n})\\n\\nwebview:evaluate(\\"fetch(\'http://lune.app/print\')\\")\\n```","source":{"line":23,"path":"lib/webview.luau"}}')}}]);