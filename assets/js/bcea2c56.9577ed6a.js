"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[72],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>f});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},p="mdxType",w={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(t),d=a,f=p["".concat(s,".").concat(d)]||p[d]||w[d]||o;return t?r.createElement(f,l(l({ref:n},u),{},{components:t})):r.createElement(f,l({ref:n},u))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=d;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[p]="string"==typeof e?e:a,l[1]=i;for(var c=2;c<o;c++)l[c]=t[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},20858:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var r=t(87462),a=(t(67294),t(3905));const o={},l=void 0,i={type:"mdx",permalink:"/luneweb/examples",source:"@site/pages/examples.md",description:"Creating a basic Window with a WebView",frontMatter:{}},s=[{value:"Creating a basic Window with a WebView",id:"creating-a-basic-window-with-a-webview",level:2},{value:"Creating a basic UI component",id:"creating-a-basic-ui-component",level:2}],c={toc:s},u="wrapper";function p(e){let{components:n,...t}=e;return(0,a.kt)(u,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"examples"},"Examples"),(0,a.kt)("h2",{id:"creating-a-basic-window-with-a-webview"},"Creating a basic Window with a WebView"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="src/init.luau"',title:'"src/init.luau"'},'local wry = require("@luneweb/wry")\n\nlocal loop: wry.Connection\nlocal window = wry.create_window({\n  title = "Lune"\n})\n\nwry.create_webview(window, {\n  url = "https://roblox.com/"\n})\n\n\n--[[\n  if we don\'t create an event loop, our window will be closed\n  the moment we run the apllication\n]]\nloop = wry.event_loop(window, function(msg)\n  if msg.event_type == "CloseRequested" then\n    window:close()\n    loop.stop()\n  end\nend)\n\n--[[\n  this method will start all the previously created event loops\n  without this, our event loops will never start and the app will crash\n]]\nwry.run()\n')),(0,a.kt)("h2",{id:"creating-a-basic-ui-component"},"Creating a basic UI component"),(0,a.kt)("p",null,"This example does not cover how to handle a window and it's event loop."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="src/javascript/hello.js"',title:'"src/javascript/hello.js"'},'/*\n    we\'ll try to not create any variables in the main scope\n    because when wry evaluates a javascript code into the webview\n    it keeps the variables for the whole session\n\n    for example, if we do `let a = 100` twice\n    the second one will fail because `a` is already declared.\n*/\n\n(() => {\n  /*\n    the reason for creating a function here is because we want\n    the try and catch block to return either { success: true } or { success: false } for us\n    so in luau code we know if creating the element was successful or not\n  */\n  try {\n    let el = document.createElement("h1");\n    el.innerHTML = "Hello, Lune!";\n    document.body.appendChild(el);\n    return { success: true };\n  } catch (error) {\n    return {\n      success: false,\n      error: {\n        message: error.message,\n        name: error.name,\n        stack: error.stack,\n      },\n    };\n  }\n\n  /*\n    if we want luau to get { success: boolean }\n    we\'ll need the returned value to be the last statement in the code\n    so we call the function directly at the last part of the code\n  */\n})();\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="lib/init.luau"',title:'"lib/init.luau"'},'--[[\n    we\'ll be using the fs library to read the javascript code\n    and use the regex library to replace "Hello, Lune!" with whatever string we want\n]]\nlocal fs = require("@luneweb/fs")\nlocal regex = require("@luneweb/regex")\n\n--[[\n    since our javascript code returns { success: boolean }\n    and the webview library turns javascript values into luau values automatically\n    we can create a type for it so we can get typechecking in our code\n]]\ntype JSError = {\n    message: string,\n    name: string,\n    stack: string,\n}\n\ntype Status = {\n    success: true,\n} | {\n    success: false,\n    error: JSError,\n}\n\nlocal function label(text: string): Status\n    --[[\n        we\'ll use fs.readFile to get the javascript as a luau string\n        and then we\'ll use regex to replace "Hello, Lune!"\n        with the provided string in the function paramters\n    ]]\n    local code = fs.readFile("src/javascript/hello.js")\n    code = regex.new("Hello, Lune!"):replaceAll(code, text)\n\n    --[[\n        we\'ll evaluate the javascript code and return it\'s result\n    ]]\n    return webview:evaluate(code)\nend\n\nlocal status = label("Hello, World!")\n\n--[[\n    since our javascript code returns { success: boolean }\n    we can check the result and print out a warning if .success was false\n]]\nif status.success == false then\n    print("Failed to create web element")\n    print(status.error)\nend\n')))}p.isMDXComponent=!0}}]);