"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[72],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>b});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),i=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=i(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=i(n),f=a,b=p["".concat(s,".").concat(f)]||p[f]||d[f]||l;return n?r.createElement(b,o(o({ref:t},u),{},{components:n})):r.createElement(b,o({ref:t},u))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=f;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[p]="string"==typeof e?e:a,o[1]=c;for(var i=2;i<l;i++)o[i]=n[i];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},20858:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>o,default:()=>p,frontMatter:()=>l,metadata:()=>c,toc:()=>s});var r=n(87462),a=(n(67294),n(3905));const l={},o=void 0,c={type:"mdx",permalink:"/luneweb/examples",source:"@site/pages/examples.md",description:"Creating a basic UI component",frontMatter:{}},s=[{value:"Creating a basic UI component",id:"creating-a-basic-ui-component",level:2}],i={toc:s},u="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},i,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"examples"},"Examples"),(0,a.kt)("h2",{id:"creating-a-basic-ui-component"},"Creating a basic UI component"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="src/javascript/hello.js"',title:'"src/javascript/hello.js"'},'/*\n    we\'ll try to not create any variables in the main scope\n    because when wry evaluates a javascript code into the webview\n    it keeps the variables for the whole session\n\n    for example, if we do `let a = 100` twice\n    the second one will fail because `a` is already declared.\n*/\n\n(() => {\n  /*\n    the reason for creating a function here is because we want\n    the try and catch block to return either { success: true } or { success: false } for us\n    so in luau code we know if creating the element was successful or not\n  */\n  try {\n    let el = document.createElement("h1");\n    el.innerHTML = "Hello, Lune!";\n    document.body.appendChild(el);\n    return { success: true };\n  } catch {\n    return { success: false };\n  }\n\n  /*\n    if we want luau to get { success: boolean }\n    we\'ll need the returned value to be the last statement in the code\n    so we call the function directly at the last part of the code\n  */\n})();\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="lib/init.luau"',title:'"lib/init.luau"'},'--[[\n    we\'ll be using the fs library to read the javascript code\n    and use the regex library to replace "Hello, Lune!" with whatever string we want\n]]\nlocal fs = require("@luneweb/fs")\nlocal regex = require("@luneweb/regex")\n\n--[[\n    since our javascript code returns { success: boolean }\n    and the webview library turns javascript values into luau values automatically\n    we can create a type for it so we can get typechecking in our code\n]]\ntype Status = {\n    success: boolean,\n}\n\nlocal function label(text: string): Status\n    --[[\n        we\'ll use fs.readFile to get the javascript as a luau string\n        and then we\'ll use regex to replace "Hello, Lune!"\n        with the provided string in the function paramters\n    ]]\n    local code = fs.readFile("src/javascript/hello.js")\n    code = regex.new("Hello, Lune!"):replaceAll(code, text)\n\n    --[[\n        we\'ll evaluate the javascript code and return it\'s result\n    ]]\n    return webview:evaluate(code)\nend\n\nlocal status = label("Hello, World!")\n\n--[[\n    since our javascript code returns { success: boolean }\n    we can check the result and print out a warning if .success was false\n]]\nif status.success == false then\n    warn("Failed to create label")\nend\n')))}p.isMDXComponent=!0}}]);