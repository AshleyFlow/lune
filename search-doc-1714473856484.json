[{"title":"HTTP","type":0,"sectionRef":"#","url":"/luneweb/api/HTTP","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"HTTP","url":"/luneweb/api/HTTP#types","content":" "},{"title":"HttpMethod​","type":1,"pageTitle":"HTTP","url":"/luneweb/api/HTTP#HttpMethod","content":"&lt;/&gt; type HttpMethod = &quot;GET&quot; | &quot;POST&quot; | &quot;PUT&quot; | &quot;DELETE&quot; | &quot;HEAD&quot; | &quot;OPTIONS&quot; | &quot;PATCH&quot;   "},{"title":"HttpHandler​","type":1,"pageTitle":"HTTP","url":"/luneweb/api/HTTP#HttpHandler","content":"&lt;/&gt; type HttpHandler = (request: Request) → string | Response   "},{"title":"Request​","type":1,"pageTitle":"HTTP","url":"/luneweb/api/HTTP#Request","content":"&lt;/&gt; interface Request { path: string query: {[string]: string?} method: HttpMethod headers: {[string]: string} body: (string | buffer) }   "},{"title":"Response​","type":1,"pageTitle":"HTTP","url":"/luneweb/api/HTTP#Response","content":"&lt;/&gt; interface Response { status: number? headers: {[string]: string}? body: (string | buffer)? }  "},{"title":"Window","type":0,"sectionRef":"#","url":"/luneweb/api/Window","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Window","url":"/luneweb/api/Window#properties","content":" "},{"title":"webview​","type":1,"pageTitle":"Window","url":"/luneweb/api/Window#webview","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Window.webview: WebView? This property keeps the attached webview from being garbage collected  "},{"title":"size​","type":1,"pageTitle":"Window","url":"/luneweb/api/Window#size","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Window.size: Dimension Does not account for elements in the webview WebView alternative local size: Dimension = window.webview:evaluate(&quot;{ x: window.innerWidth, y: window.innerHeight }&quot;)  "},{"title":"Functions​","type":1,"pageTitle":"Window","url":"/luneweb/api/Window#functions","content":" "},{"title":"close​","type":1,"pageTitle":"Window","url":"/luneweb/api/Window#close","content":"&lt;/&gt; Window:close() → () Closes the window "},{"title":"WebView","type":0,"sectionRef":"#","url":"/luneweb/api/WebView","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"WebView","url":"/luneweb/api/WebView#functions","content":" "},{"title":"evaluate_noresult​","type":1,"pageTitle":"WebView","url":"/luneweb/api/WebView#evaluate_noresult","content":"&lt;/&gt; WebView:evaluate_noresult(script: string) → () Similar to WebView:evaluate(...), but does not yield and does not return any result  "},{"title":"evaluate_callback​","type":1,"pageTitle":"WebView","url":"/luneweb/api/WebView#evaluate_callback","content":"&lt;/&gt; WebView:evaluate_callback( script: string, callback: (result: unknown) → () ) → () Similar to WebView:evaluate(...), but instead of yielding to return result, it passes the result to the callback function  "},{"title":"evaluate​","type":1,"pageTitle":"WebView","url":"/luneweb/api/WebView#evaluate","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; WebView:evaluate(script: string) → unknown Runs the provided javascript code through the webview and returns the last statement as a lua value Bug(s) Will yield forever if you run it while custom protocol is sending response to webview for loading a page Example local result = webview:evaluate([[ let value = { a: 5000 }; value.a += 1000; value ]]) print(result.a) -- 6000   "},{"title":"ipc_handler​","type":1,"pageTitle":"WebView","url":"/luneweb/api/WebView#ipc_handler","content":"&lt;/&gt; WebView:ipc_handler(callback: (message: unknown) → void) → WebViewIPCHandle "},{"title":"Types","type":1,"pageTitle":"WebView","url":"/luneweb/api/WebView##","content":""},{"title":"​","type":1,"pageTitle":"WebView","url":"/luneweb/api/WebView#WebViewIPCHandle","content":"interface WebViewIPCHandle { stop: () → () }  Receive messages from javascript Messages will automatically be converted into luau values Example -- luau webview:ipc_handler(function(message) print(message.print_this) -- &quot;Hello, World!&quot; end) // javascript window.luneweb.postMessage({ print_this: 'Hello, World!' })   "},{"title":"load_url​","type":1,"pageTitle":"WebView","url":"/luneweb/api/WebView#load_url","content":"&lt;/&gt; WebView:load_url(url: string) → () Navigate to the specified url  "},{"title":"load_url_with_headers​","type":1,"pageTitle":"WebView","url":"/luneweb/api/WebView#load_url_with_headers","content":"&lt;/&gt; WebView:load_url_with_headers( url: string, headers: WebViewHeaders-- ! having more than 1 header value will error ) → () Navigate to the specified url using the specified headers "},{"title":"Wry","type":0,"sectionRef":"#","url":"/luneweb/api/Wry","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Wry","url":"/luneweb/api/Wry#types","content":" "},{"title":"Dimension​","type":1,"pageTitle":"Wry","url":"/luneweb/api/Wry#Dimension","content":"&lt;/&gt; interface Dimension { x: number y: number } 2D Dimension used by Wry for mouse position  "},{"title":"WebViewHeaders​","type":1,"pageTitle":"Wry","url":"/luneweb/api/Wry#WebViewHeaders","content":"&lt;/&gt; type WebViewHeaders = {[string]: string} Set headers used when loading the requested url Limitation Will error if it contains more than 1 header value Not sure why this happens, but after lots of debugging I'm certain it's an issue with wry and not luneweb "},{"title":"Properties​","type":1,"pageTitle":"Wry","url":"/luneweb/api/Wry#properties","content":" "},{"title":"events​","type":1,"pageTitle":"Wry","url":"/luneweb/api/Wry#events","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Wry.events: { CloseRequested: WindowEvent, MouseButton: WindowEvent, KeyCode: WindowEvent, CursorMoved: WindowEvent, None: WindowEvent } Example function loop(msg: WindowEvent) if msg == Wry.events.CloseRequested then -- close the application end end  "},{"title":"Functions​","type":1,"pageTitle":"Wry","url":"/luneweb/api/Wry#functions","content":" "},{"title":"create_window​","type":1,"pageTitle":"Wry","url":"/luneweb/api/Wry#create_window","content":"&lt;/&gt; Wry.create_window(config: WindowConfig) → Window "},{"title":"Types","type":1,"pageTitle":"Wry","url":"/luneweb/api/Wry##","content":""},{"title":"​","type":1,"pageTitle":"Wry","url":"/luneweb/api/Wry#WindowConfig","content":"interface WindowConfig { title: string? }  Example local window = Wry.create_window({ title = &quot;Hello, Lune!&quot; })   "},{"title":"create_webview​","type":1,"pageTitle":"Wry","url":"/luneweb/api/Wry#create_webview","content":"&lt;/&gt; Wry.create_webview(config: WebViewConfig) → WebView "},{"title":"Types","type":1,"pageTitle":"Wry","url":"/luneweb/api/Wry##","content":""},{"title":"​","type":1,"pageTitle":"Wry","url":"/luneweb/api/Wry#WebViewConfig","content":"interface WebViewConfig { with_devtools: boolean? init_script: string? html: string? url: string? headers: WebViewHeaders?-- ! having more than 1 header value will error custom_protocols: {[string]: HttpHandler}? }  Example Wry.create_webview(window, { html = &quot;&lt;h1&gt;Hello, Lune!&lt;/h1&gt;&quot; })   "},{"title":"event_loop​","type":1,"pageTitle":"Wry","url":"/luneweb/api/Wry#event_loop","content":"&lt;/&gt; Wry.event_loop( window: Window, callback: (WindowEvent) → () ) → WindowEventLoopHandle "},{"title":"Types","type":1,"pageTitle":"Wry","url":"/luneweb/api/Wry##","content":""},{"title":"​","type":1,"pageTitle":"Wry","url":"/luneweb/api/Wry#WindowEvent","content":"interface WindowEvent { mousetbutton: string? keycode: string? pressed: boolean? position: Dimension? }  "},{"title":"​","type":1,"pageTitle":"Wry","url":"/luneweb/api/Wry#WindowEventLoopHandle","content":"interface WindowEventLoopHandle { stop: () → () }  Example local handle handle = Wry.event_loop(window, function(msg) if msg == Wry.events.CloseRequested then window:close() handle.stop() elseif msg == Wry.events.KeyCode then print(msg) elseif msg == Wry.events.MouseButton then print(msg) elseif msg == Wry.events.CursorMoved then print(msg) end end)   "},{"title":"run​","type":1,"pageTitle":"Wry","url":"/luneweb/api/Wry#run","content":"&lt;/&gt; Wry.run() → () Runs the main event loop of your application Requirement Must be run when there is atleast one active event loop connection "}]